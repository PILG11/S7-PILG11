name: vagrant

on:
  workflow_call:

jobs:
  component:
    runs-on: ubuntu-latest

    steps:
      # pull the source code
      - uses: actions/checkout@v3

      # configure crendentials for terraform init (state bucket + dynamodb access)
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: eu-west-3
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # verify identity
      - name: verify identity
        run: aws sts get-caller-identity
        shell: bash

      # copy backups files to aws
      - name: copy all sql files to s3 bucket
        run: aws s3 cp ./backups/* s3://pilg11-db-backup
        shell: bash

      # delete backups files from the repo
      - name: delete all backups files
        run: rm -rf ./backups/*
        shell: bash

      # # plan the component (with optional debugging) to a file. We want to continue on error so that we will _always_
      # # call the `render plan to file`. We can't use `always()` though, because the logic is bit more complicated than that.
      # # follow the ifs for details.
      # - name: plan
      #   env:
      #     TF_LOG: ${{ runner.debug == '1' && 'debug' || '' }}
      #   id: plan
      #   continue-on-error: true
      #   run: >
      #     terraform -chdir=${{ matrix.component-name }} plan
      #     -var-file=${{ github.workspace }}/environments/${{ inputs.environment-name }}.tfvars
      #     -out=${{ inputs.environment-name }}.tfplan

      # # if outcome is a success then tfplan file must exist, therefore we want to run the tf show.
      # # we're using explicit `shell: bash` to ensure pipefail is on.
      # - name: render plan output to file
      #   if: steps.plan.outcome == 'success'
      #   shell: bash
      #   run: >
      #     terraform -chdir=${{ matrix.component-name }} show
      #     ${{ inputs.environment-name }}.tfplan
      #     -no-color
      #     2>&1
      #     | tee plan.txt

      # # run our custom summary script to generate the clickable output with plan details.
      # - name: save output to summary
      #   if: steps.plan.outcome == 'success'
      #   uses: actions/github-script@v6
      #   with:
      #     script: >
      #       require('./.github/summary.js')('plan', require)
